{"version":3,"sources":["components/Header/Header.module.css","components/Search/Search.module.css","components/Search/Input.module.css","components/Search/Filter.module.css","components/Countries/Countries.module.css","components/Country/Country.module.css","components/Spinner/Spinner.module.css","components/Header/Header.jsx","components/Search/Input.jsx","store/actions/actionTypes.js","components/Search/Filter.jsx","components/Search/Search.jsx","components/Country/Country.jsx","components/Spinner/Spinner.jsx","components/Countries/Countries.jsx","components/FullCountry/FullCountry.jsx","store/actions/actions.js","components/NotFound/NotFound.jsx","App.js","serviceWorker.js","store/reducers/reducer.js","index.js","components/FullCountry/FullCountry.module.css"],"names":["module","exports","Header","useState","theme","changeTheme","themeName","changeThemeName","handleChangeColor","bgColor","sectionColor","textColor","root","document","querySelector","style","setProperty","className","classes","onClick","connect","dispatch","filterDataByName","name","type","Input","onChange","value","target","placeholder","filterByRegion","region","Filter","selected","disabled","hidden","Search","Country","country","history","useHistory","push","toLowerCase","src","flag","alt","population","capital","Spinner","textAlign","fontWeight","fontSize","state","countries","filterCountries","resetCountries","useEffect","Countries","map","i","key","fullCountry","fetchData","axios","get","then","data","catch","er","console","log","actions","removeData","params","useParams","FullCountry","back","goBack","body","img","info","furtherInfo","nativeName","subregion","topLevelDomain","currencies","v","languages","border","borders","length","marginTop","display","NotFound","opacity","path","exact","render","component","Boolean","window","location","hostname","match","initialState","fullCountries","reducer","action","filter","startsWith","defaults","baseURL","store","createStore","applyMiddleware","thunk","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e8f81731.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3Oxol\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"Search_Search__1Tn8r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__rDncH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__2bwiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Countries\":\"Countries_Countries__3TBD6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Country\":\"Country_Country__2QNKg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__2cdPI\",\"lds-ring\":\"Spinner_lds-ring__36aWR\"};","import React, { useState } from \"react\";\r\nimport classes from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n  const [theme, changeTheme] = useState(\"dark\");\r\n  const [themeName, changeThemeName] = useState(\"Dark Mode\");\r\n\r\n  const handleChangeColor = (bgColor, sectionColor, textColor) => {\r\n    let root = document.querySelector(\":root\");\r\n    root.style.setProperty(\"--bg-color\", bgColor);\r\n    root.style.setProperty(\"--section-color\", sectionColor);\r\n    root.style.setProperty(\"--text-color\", textColor);\r\n  };\r\n\r\n  const changeThemeColor = () => {\r\n    if (theme === \"dark\") {\r\n      handleChangeColor(\r\n        \"hsl(207, 26%, 17%)\",\r\n        \"hsl(209, 23%, 22%)\",\r\n        \"rgb(245,245,245)\"\r\n      );\r\n      changeTheme(\"light\");\r\n      changeThemeName(\"Light Mode\");\r\n    } else {\r\n      handleChangeColor(\"rgba(245, 245, 245)\", \"white\", \"rgb(26, 26, 26)\");\r\n      changeTheme(\"dark\");\r\n      changeThemeName(\"Dark Mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header className={classes.Header}>\r\n      <h1>Where in the world?</h1>\r\n      <h5 onClick={changeThemeColor}>\r\n        <i className=\"far fa-moon\"></i>\r\n        {themeName}\r\n      </h5>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Input = ({ filterDataByName }) => {\r\n  return (\r\n    <div className={classes.Input}>\r\n      <i className=\"fas fa-search\"></i>\r\n      <input\r\n        onChange={({ target: { value } }) => {\r\n          filterDataByName(value);\r\n        }}\r\n        type=\"text\"\r\n        placeholder=\"Search for a country...\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapActionsToProps = dispatch => {\r\n  return {\r\n    filterDataByName: name => dispatch({ type: actionTypes.FILTER_NAME, name })\r\n  };\r\n};\r\n\r\nexport default connect(null, mapActionsToProps)(Input);\r\n","export const FETCH_DATA = \"FETCH_DATA\";\r\nexport const FILTER_NAME = \"FILTER_NAME\";\r\nexport const FILTER_REGION = \"FILTER_REGION\";\r\nexport const FETCH_FULL_COUNTRY = \"FETCH_FULL_COUNTRY\";\r\nexport const REMOVE_DATA = \"REMOVE_DATA\";\r\nexport const RESET_COUNTRIES = \"RESET_COUNTRIES\";\r\n","import React from \"react\";\r\nimport classes from \"./Filter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\n\r\nconst Filter = ({ filterByRegion }) => {\r\n  return (\r\n    <select\r\n      onChange={({ target: { value } }) => {\r\n        filterByRegion(value);\r\n      }}\r\n      className={classes.Filter}\r\n    >\r\n      <option>All</option>\r\n      <option>Africa</option>\r\n      <option>Asia</option>\r\n      <option>America</option>\r\n      <option>Europe</option>\r\n      <option>Oceania</option>\r\n      <option selected disabled hidden>\r\n        Filter by Region\r\n      </option>\r\n    </select>\r\n  );\r\n};\r\n\r\nconst mapActionsToProps = dispatch => {\r\n  return {\r\n    filterByRegion: region =>\r\n      dispatch({ type: actionTypes.FILTER_REGION, region })\r\n  };\r\n};\r\n\r\nexport default connect(null, mapActionsToProps)(Filter);\r\n","import React from \"react\";\r\nimport classes from \"./Search.module.css\";\r\nimport Input from \"./Input\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst Search = () => {\r\n  return (\r\n    <section className={classes.Search}>\r\n      <Input />\r\n      <Filter />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport classes from \"./Country.module.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Country = ({ country }) => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div\r\n      className={classes.Country}\r\n      onClick={() => {\r\n        history.push(`/country_${country.name.toLowerCase()}`);\r\n      }}\r\n    >\r\n      <header>\r\n        <img src={country.flag} alt={`${country.name} Flag`} />\r\n      </header>\r\n\r\n      <div>\r\n        <h3>{country.name}</h3>\r\n        <p>\r\n          <span>Population: </span>\r\n          {country.population}\r\n        </p>\r\n        <p>\r\n          <span>Region: </span>\r\n          {country.region}\r\n        </p>\r\n        <p>\r\n          <span>Capital: </span>\r\n          {country.capital}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","import React from \"react\";\r\nimport classes from \"./Spinner.module.css\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div>\r\n      <div className={classes.Spinner}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n      <p style={{ textAlign: \"center\", fontWeight: \"600\", fontSize: \"1.5rem\" }}>\r\n        Loading...\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useEffect } from \"react\";\r\nimport classes from \"./Countries.module.css\";\r\nimport Country from \"../Country/Country\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport LazyLoad from \"react-lazyload\";\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\n\r\nconst Countries = ({ countries, resetCountries }) => {\r\n  useEffect(() => {\r\n    return () => resetCountries();\r\n  }, []);\r\n\r\n  return (\r\n    <section className={classes.Countries}>\r\n      {countries ? (\r\n        countries.map((country, i) => (\r\n          <LazyLoad key={i}>\r\n            <Country country={country} />\r\n          </LazyLoad>\r\n        ))\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    countries: state.filterCountries\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = dispatch => {\r\n  return {\r\n    resetCountries: () => dispatch({ type: actionTypes.RESET_COUNTRIES })\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(Countries);\r\n","import React, { useEffect } from \"react\";\r\nimport classes from \"./FullCountry.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/actions\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\n\r\nconst FullCountry = ({ fetchData, country, removeData }) => {\r\n  const params = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    fetchData(params.country);\r\n\r\n    return () => removeData();\r\n  }, []);\r\n\r\n  return (\r\n    <section className={classes.FullCountry}>\r\n      <button className={classes.back} onClick={() => history.goBack()}>\r\n        <i className=\"fas fa-long-arrow-alt-left\"></i>Back\r\n      </button>\r\n\r\n      {country ? (\r\n        <div>\r\n          <div className={classes.body}>\r\n            <div className={classes.img}>\r\n              <img src={country.flag} alt={country.name} />\r\n            </div>\r\n\r\n            <div className={classes.info}>\r\n              <h3>{country.name}</h3>\r\n              <div className={classes.furtherInfo}>\r\n                <div>\r\n                  <p>\r\n                    <span>Native Name: </span>\r\n                    {country.nativeName}\r\n                  </p>\r\n                  <p>\r\n                    <span>Population: </span>\r\n                    {country.population}\r\n                  </p>\r\n                  <p>\r\n                    <span>Region: </span>\r\n                    {country.region}\r\n                  </p>\r\n                  <p>\r\n                    <span>Sub Region: </span>\r\n                    {country.subregion}\r\n                  </p>\r\n                  <p>\r\n                    <span>Capital: </span>\r\n                    {country.capital}\r\n                  </p>\r\n                </div>\r\n\r\n                <div>\r\n                  <p>\r\n                    <span>Top Level Domain: </span>\r\n                    {country.topLevelDomain[0]}\r\n                  </p>\r\n                  <p>\r\n                    <span>Currencies: </span>\r\n                    {country.currencies.map((v, i) => (\r\n                      <span key={i}>{v.name} </span>\r\n                    ))}\r\n                  </p>\r\n                  <p>\r\n                    <span>Languages: </span>\r\n                    {country.languages.map((v, i) => (\r\n                      <span key={i}>{v.name} </span>\r\n                    ))}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className={classes.border}>\r\n                <p>Border Countries: </p>\r\n                <div>\r\n                  {country.borders.length ? (\r\n                    country.borders.map((v, i) => <button key={i}>{v}</button>)\r\n                  ) : (\r\n                    <span\r\n                      style={{\r\n                        fontSize: \"1.4rem\",\r\n                        marginTop: \"1rem\",\r\n                        display: \"inline-block\"\r\n                      }}\r\n                    >\r\n                      None\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapActionsToProps = dispatch => {\r\n  return {\r\n    fetchData: country => dispatch(actions.fetchFullCountry(country)),\r\n    removeData: () => dispatch({ type: actionTypes.REMOVE_DATA })\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    country: state.fullCountry\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(FullCountry);\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const fetchData = () => {\r\n  return dispatch => {\r\n    axios\r\n      .get(\"/all\")\r\n      .then(({ data }) => {\r\n        dispatch({ type: actionTypes.FETCH_DATA, data: data });\r\n      })\r\n      .catch(er => console.log(er));\r\n  };\r\n};\r\n\r\nexport const fetchFullCountry = country => {\r\n  return dispatch => {\r\n    axios\r\n      .get(`name/${country}`)\r\n      .then(({ data }) => {\r\n        dispatch({ type: actionTypes.FETCH_FULL_COUNTRY, data: data[0] });\r\n      })\r\n      .catch(er => console.log(er));\r\n  };\r\n};\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <section style={{ textAlign: \"center\", marginTop: \"5rem\" }}>\r\n      <h2 style={{ fontSize: \"5rem\" }}>404</h2>\r\n      <h3 style={{ fontSize: \"2rem\", fontWeight: 600, opacity: 0.9 }}>\r\n        Page Not Found.\r\n      </h3>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { useEffect } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Search from \"./components/Search/Search\";\nimport Countries from \"./components/Countries/Countries\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./store/actions/actions\";\nimport { Route, Switch } from \"react-router-dom\";\nimport FullCountry from \"./components/FullCountry/FullCountry\";\nimport NotFound from \"./components/NotFound/NotFound\";\n\nconst App = ({ fetchData }) => {\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <Header />\n      <Switch>\n        <Route\n          path=\"/\"\n          exact\n          render={() => (\n            <div>\n              <Search />\n              <Countries />\n            </div>\n          )}\n        />\n        <Route path=\"/country_:country\" component={FullCountry} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n};\n\nconst mapActionsToProps = dispatch => {\n  return {\n    fetchData: () => dispatch(actions.fetchData())\n  };\n};\n\nexport default connect(null, mapActionsToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  fullCountries: null,\r\n  filterCountries: null,\r\n  fullCountry: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  let filterCountries;\r\n\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_DATA:\r\n      return {\r\n        ...state,\r\n        fullCountries: action.data,\r\n        filterCountries: action.data\r\n      };\r\n\r\n    case actionTypes.FILTER_NAME:\r\n      filterCountries = state.fullCountries.filter(country =>\r\n        country.name.toLowerCase().startsWith(action.name.toLowerCase())\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        filterCountries\r\n      };\r\n\r\n    case actionTypes.FILTER_REGION:\r\n      if (action.region === \"All\") {\r\n        return {\r\n          ...state,\r\n          filterCountries: state.fullCountries\r\n        };\r\n      }\r\n\r\n      filterCountries = state.fullCountries.filter(country =>\r\n        country.region.toLowerCase().startsWith(action.region.toLowerCase())\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        filterCountries\r\n      };\r\n\r\n    case actionTypes.FETCH_FULL_COUNTRY:\r\n      return {\r\n        ...state,\r\n        fullCountry: action.data\r\n      };\r\n\r\n    case actionTypes.REMOVE_DATA:\r\n      return {\r\n        ...state,\r\n        fullCountry: null\r\n      };\r\n\r\n    case actionTypes.RESET_COUNTRIES:\r\n      return {\r\n        ...state,\r\n        filterCountries: state.fullCountries\r\n      };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport reducer from \"./store/reducers/reducer\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://restcountries.eu/rest/v2\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FullCountry\":\"FullCountry_FullCountry__jN5wf\",\"back\":\"FullCountry_back__3GHB4\",\"body\":\"FullCountry_body__1oBtp\",\"img\":\"FullCountry_img__2t_UK\",\"info\":\"FullCountry_info__3-aJv\",\"furtherInfo\":\"FullCountry_furtherInfo__2cp_1\",\"border\":\"FullCountry_border__1Mfsu\"};"],"sourceRoot":""}